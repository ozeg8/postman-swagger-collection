{
	"info": {
		"_postman_id": "bf3656e5-bb8e-4b4c-a665-8aea8b201e13",
		"name": "Swagger Petstore",
		"description": "This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.\n\nContact Support:\n Email: apiteam@swagger.io",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33969904",
		"_collection_link": "https://lunar-shuttle-900516.postman.co/workspace/New-Team-Workspace~7a46871a-af4f-49b1-a643-60a1d3d16769/collection/33969904-bf3656e5-bb8e-4b4c-a665-8aea8b201e13?action=share&source=collection_link&creator=33969904"
	},
	"item": [
		{
			"name": "Create User",
			"item": [
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 800ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(800);",
									"});",
									"",
									"pm.environment.set('validUserId', parseInt(pm.response.json().message))"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": 14282420,\n    \"username\": \"{{validUsername}}\",\n    \"firstName\": \"{{firstName}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"email\": \"{{validEmailAddress}}\",\n    \"password\": \"{{validPassword}}\",\n    \"phone\": \"{{validPhoneNumber}}\",\n    \"userStatus\": -17771223\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user"
							]
						},
						"description": "This can only be done by the logged in user."
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 14282420,\n    \"username\": \"elit exercitation culpa\",\n    \"firstName\": \"officia magna cillum\",\n    \"lastName\": \"esse tempor\",\n    \"email\": \"in anim in non adipisicing\",\n    \"password\": \"ex \",\n    \"phone\": \"mollit aute dolor\",\n    \"userStatus\": -17771223\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/user",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "Create Pet",
			"item": [
				{
					"name": "Add a new pet to the store",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 600ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});",
									"",
									"var schema = {",
									"    \"id\": \"number\",",
									"    \"category\": {",
									"        \"id\": \"number\",",
									"        \"name\": \"string\"",
									"    },",
									"    \"name\": \"string\",",
									"    \"photoUrls\": [",
									"        \"string\",",
									"        \"string\"",
									"    ],",
									"    \"tags\": [",
									"        {",
									"            \"id\": \"number\",",
									"            \"name\": \"string\"",
									"        },",
									"        {",
									"            \"id\": \"number\",",
									"            \"name\": \"string\"",
									"        }",
									"    ],",
									"    \"status\": \"string\"",
									"}",
									"",
									"pm.test('Schema is valid', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"});",
									"",
									"pm.environment.set('validPetId', parseInt(pm.response.json().id))"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"doggie\",\n    \"photoUrls\": [\n        \"ad tempor id magna\",\n        \"Duis\"\n    ],\n    \"id\": 8979789078978969,\n    \"category\": {\n        \"id\": -20476978,\n        \"name\": \"id occaecat est\"\n    },\n    \"tags\": [\n        {\n            \"id\": 895601,\n            \"name\": \"magna ipsum\"\n        },\n        {\n            \"id\": 86688648,\n            \"name\": \"quis voluptate\"\n        }\n    ],\n    \"status\": \"available\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/pet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet"
							]
						}
					},
					"response": [
						{
							"name": "Invalid input",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pet",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet"
									]
								}
							},
							"status": "Method Not Allowed",
							"code": 405,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "Create Order",
			"item": [
				{
					"name": "Place an order for a pet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 600ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});",
									"",
									"var schema = {",
									"    \"id\": \"number\",",
									"    \"petId\": \"number\",",
									"    \"quantity\": \"number\",",
									"    \"shipDate\": \"string\",",
									"    \"status\": \"string\",",
									"    \"complete\": \"boolean\"",
									"};",
									"",
									"pm.test('Schema is valid', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"});",
									"",
									"pm.environment.set('validOrderId', parseInt(pm.response.json().id ))",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": 7878787878787,\n    \"petId\": {{validPetId}},\n    \"quantity\": 1,\n    \"shipDate\": \"2005-01-06T15:02:51.516Z\",\n    \"status\": \"pending\",\n    \"complete\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/store/order",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"store",
								"order"
							]
						}
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": -97923498,\n    \"petId\": -73208560,\n    \"quantity\": -9455943,\n    \"shipDate\": \"2005-01-06T15:02:51.516Z\",\n    \"status\": \"approved\",\n    \"complete\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/store/order",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"id\": -97923498,\n \"petId\": -73208560,\n \"quantity\": -9455943,\n \"shipDate\": \"2005-01-06T15:02:51.516Z\",\n \"status\": \"approved\",\n \"complete\": true\n}"
						},
						{
							"name": "Invalid Order",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": -97923498,\n    \"petId\": -73208560,\n    \"quantity\": -9455943,\n    \"shipDate\": \"2005-01-06T15:02:51.516Z\",\n    \"status\": \"approved\",\n    \"complete\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/store/order",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "Positive",
			"item": [
				{
					"name": "Pet",
					"item": [
						{
							"name": "Update an existing pet",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 400ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"doggie\",\n    \"photoUrls\": [\n        \"nostru\",\n        \"enim laborum\"\n    ],\n    \"id\": {{validPetId}},\n    \"category\": {\n        \"id\": 95616787,\n        \"name\": \"commodo sit\"\n    },\n    \"tags\": [\n        {\n            \"id\": 81095576,\n            \"name\": \"laborum adipisicing\"\n        },\n        {\n            \"id\": -79022802,\n            \"name\": \"ea ut dolore culpa sit\"\n        }\n    ],\n    \"status\": \"pending\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/pet",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet"
									]
								}
							},
							"response": [
								{
									"name": "Invalid ID supplied",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/pet",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pet"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Pet not found",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/pet",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pet"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Validation exception",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/pet",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pet"
											]
										}
									},
									"status": "Method Not Allowed",
									"code": 405,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Finds Pets by status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 600ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(600);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/pet/findByStatus?status=available&status=available",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										"findByStatus"
									],
									"query": [
										{
											"key": "status",
											"value": "available",
											"description": "(Required) Status values that need to be considered for filter"
										},
										{
											"key": "status",
											"value": "available",
											"description": "(Required) Status values that need to be considered for filter"
										}
									]
								},
								"description": "Multiple status values can be provided with comma separated strings"
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/pet/findByStatus?status=available&status=available",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pet",
												"findByStatus"
											],
											"query": [
												{
													"key": "status",
													"value": "available"
												},
												{
													"key": "status",
													"value": "available"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n {\n  \"name\": \"doggie\",\n  \"photoUrls\": [\n   \"velit\",\n   \"fugiat aliqua anim\"\n  ],\n  \"id\": 6331669,\n  \"category\": {\n   \"id\": 89069562,\n   \"name\": \"proident non ad ut\"\n  },\n  \"tags\": [\n   {\n    \"id\": 67882262,\n    \"name\": \"fugiat cillum commodo\"\n   },\n   {\n    \"id\": -94296543,\n    \"name\": \"proident Duis ut\"\n   }\n  ],\n  \"status\": \"available\"\n },\n {\n  \"name\": \"doggie\",\n  \"photoUrls\": [\n   \"tempor minim sed officia\",\n   \"consequat au\"\n  ],\n  \"id\": -46750854,\n  \"category\": {\n   \"id\": -529801,\n   \"name\": \"nostrud irure cillum\"\n  },\n  \"tags\": [\n   {\n    \"id\": -37723887,\n    \"name\": \"cillum sed\"\n   },\n   {\n    \"id\": 87442209,\n    \"name\": \"nostrud labo\"\n   }\n  ],\n  \"status\": \"available\"\n }\n]"
								},
								{
									"name": "Invalid status value",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/pet/findByStatus?status=available&status=available",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pet",
												"findByStatus"
											],
											"query": [
												{
													"key": "status",
													"value": "available"
												},
												{
													"key": "status",
													"value": "available"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Finds Pets by tags",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/pet/findByTags?tags=ut ven&tags=qui culpa",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										"findByTags"
									],
									"query": [
										{
											"key": "tags",
											"value": "ut ven",
											"description": "(Required) Tags to filter by"
										},
										{
											"key": "tags",
											"value": "qui culpa",
											"description": "(Required) Tags to filter by"
										}
									]
								},
								"description": "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/pet/findByTags?tags=veniam sit ut dolore&tags=al",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pet",
												"findByTags"
											],
											"query": [
												{
													"key": "tags",
													"value": "veniam sit ut dolore"
												},
												{
													"key": "tags",
													"value": "al"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n {\n  \"name\": \"doggie\",\n  \"photoUrls\": [\n   \"velit\",\n   \"fugiat aliqua anim\"\n  ],\n  \"id\": 6331669,\n  \"category\": {\n   \"id\": 89069562,\n   \"name\": \"proident non ad ut\"\n  },\n  \"tags\": [\n   {\n    \"id\": 67882262,\n    \"name\": \"fugiat cillum commodo\"\n   },\n   {\n    \"id\": -94296543,\n    \"name\": \"proident Duis ut\"\n   }\n  ],\n  \"status\": \"available\"\n },\n {\n  \"name\": \"doggie\",\n  \"photoUrls\": [\n   \"tempor minim sed officia\",\n   \"consequat au\"\n  ],\n  \"id\": -46750854,\n  \"category\": {\n   \"id\": -529801,\n   \"name\": \"nostrud irure cillum\"\n  },\n  \"tags\": [\n   {\n    \"id\": -37723887,\n    \"name\": \"cillum sed\"\n   },\n   {\n    \"id\": 87442209,\n    \"name\": \"nostrud labo\"\n   }\n  ],\n  \"status\": \"available\"\n }\n]"
								},
								{
									"name": "Invalid tag value",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/pet/findByTags?tags=veniam sit ut dolore&tags=al",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pet",
												"findByTags"
											],
											"query": [
												{
													"key": "tags",
													"value": "veniam sit ut dolore"
												},
												{
													"key": "tags",
													"value": "al"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "{pet Id}",
					"item": [
						{
							"name": "Find pet by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 400ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(400);",
											"});",
											"",
											"var schema = {",
											"    \"id\": \"number\",",
											"    \"category\": {",
											"        \"id\": \"number\",",
											"        \"name\": \"string\"",
											"    },",
											"    \"name\": \"string\",",
											"    \"photoUrls\": [",
											"        \"string\",",
											"        \"string\"",
											"    ],",
											"    \"tags\": [",
											"        {",
											"            \"id\": \"number\",",
											"            \"name\": \"string\"",
											"        },",
											"        {",
											"            \"id\": \"number\",",
											"            \"name\": \"string\"",
											"        }",
											"    ],",
											"    \"status\": \"string\"",
											"};",
											"",
											"pm.test('Schema is valid', function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "api_key",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/pet/{{validPetId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										"{{validPetId}}"
									]
								},
								"description": "Returns a single pet"
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "api_key",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/pet/:petId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pet",
												":petId"
											],
											"variable": [
												{
													"key": "petId",
													"value": "20563605",
													"description": "(Required) ID of pet to return"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"name\": \"doggie\",\n \"photoUrls\": [\n  \"nostru\",\n  \"enim laborum\"\n ],\n \"id\": 53796877,\n \"category\": {\n  \"id\": 95616787,\n  \"name\": \"commodo sit\"\n },\n \"tags\": [\n  {\n   \"id\": 81095576,\n   \"name\": \"laborum adipisicing\"\n  },\n  {\n   \"id\": -79022802,\n   \"name\": \"ea ut dolore culpa sit\"\n  }\n ],\n \"status\": \"pending\"\n}"
								},
								{
									"name": "Invalid ID supplied",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "api_key",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/pet/:petId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pet",
												":petId"
											],
											"variable": [
												{
													"key": "petId",
													"value": "20563605",
													"description": "(Required) ID of pet to return"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Pet not found",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "api_key",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/pet/:petId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pet",
												":petId"
											],
											"variable": [
												{
													"key": "petId",
													"value": "20563605",
													"description": "(Required) ID of pet to return"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Updates a pet in the store with form data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "name",
											"value": "voluptate reprehenderit cu",
											"description": "Updated name of the pet"
										},
										{
											"key": "status",
											"value": "minim quis in veniam",
											"description": "Updated status of the pet"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/pet/{{validPetId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										"{{validPetId}}"
									]
								}
							},
							"response": [
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "name",
													"value": "voluptate reprehenderit cu",
													"description": "Updated name of the pet"
												},
												{
													"key": "status",
													"value": "minim quis in veniam",
													"description": "Updated status of the pet"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/pet/:petId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pet",
												":petId"
											],
											"variable": [
												{
													"key": "petId",
													"value": "20563605",
													"description": "(Required) ID of pet that needs to be updated"
												}
											]
										}
									},
									"status": "Method Not Allowed",
									"code": 405,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "uploads an image",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "additionalMetadata",
											"value": "eu sunt consequat veniam",
											"description": "Additional data to pass to server",
											"type": "text"
										},
										{
											"key": "file",
											"description": "file to upload",
											"type": "file",
											"src": []
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/pet/:petId/uploadImage",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										":petId",
										"uploadImage"
									],
									"variable": [
										{
											"key": "petId",
											"value": "20563605",
											"description": "(Required) ID of pet to update"
										}
									]
								}
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "additionalMetadata",
													"value": "eu sunt consequat veniam",
													"description": "Additional data to pass to server",
													"type": "text"
												},
												{
													"key": "file",
													"description": "file to upload",
													"type": "file",
													"src": []
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/pet/:petId/uploadImage",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pet",
												":petId",
												"uploadImage"
											],
											"variable": [
												{
													"key": "petId",
													"value": "20563605",
													"description": "(Required) ID of pet to update"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": 63976313,\n \"type\": \"culpa aliqua\",\n \"message\": \"mollit sunt ea dolor ipsum\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "User",
					"item": [
						{
							"name": "{username}",
							"item": [
								{
									"name": "Get user by user name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var schema = {",
													"    \"id\": \"number\",",
													"    \"username\": \"string\",",
													"    \"firstName\": \"string\",",
													"    \"lastName\": \"string\",",
													"    \"email\": \"string\",",
													"    \"password\": \"string\",",
													"    \"phone\": \"string\",",
													"    \"userStatus\": \"number\",",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test('Schema is valid', function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/user/{{validUsername}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												"{{validUsername}}"
											]
										}
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/user/:username",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"user",
														":username"
													],
													"variable": [
														{
															"key": "username",
															"value": "aliquip incididunt Duis dolore consequat",
															"description": "(Required) The name that needs to be fetched. Use user1 for testing. "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"id\": 14282420,\n \"username\": \"elit exercitation culpa\",\n \"firstName\": \"officia magna cillum\",\n \"lastName\": \"esse tempor\",\n \"email\": \"in anim in non adipisicing\",\n \"password\": \"ex \",\n \"phone\": \"mollit aute dolor\",\n \"userStatus\": -17771223\n}"
										},
										{
											"name": "Invalid username supplied",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/user/:username",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"user",
														":username"
													],
													"variable": [
														{
															"key": "username",
															"value": "aliquip incididunt Duis dolore consequat",
															"description": "(Required) The name that needs to be fetched. Use user1 for testing. "
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "User not found",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/user/:username",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"user",
														":username"
													],
													"variable": [
														{
															"key": "username",
															"value": "aliquip incididunt Duis dolore consequat",
															"description": "(Required) The name that needs to be fetched. Use user1 for testing. "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Updated user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than 400ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": 14282420,\n    \"username\": \"elit exercitation culpa\",\n    \"firstName\": \"officia magna cillum\",\n    \"lastName\": \"esse tempor\",\n    \"email\": \"in anim in non adipisicing\",\n    \"password\": \"ex \",\n    \"phone\": \"mollit aute dolor\",\n    \"userStatus\": -17771223\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/user/:username",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												":username"
											],
											"variable": [
												{
													"key": "username",
													"value": "aliquip incididunt Duis dolore consequat",
													"description": "(Required) name that need to be updated"
												}
											]
										},
										"description": "This can only be done by the logged in user."
									},
									"response": [
										{
											"name": "Invalid user supplied",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": 14282420,\n    \"username\": \"elit exercitation culpa\",\n    \"firstName\": \"officia magna cillum\",\n    \"lastName\": \"esse tempor\",\n    \"email\": \"in anim in non adipisicing\",\n    \"password\": \"ex \",\n    \"phone\": \"mollit aute dolor\",\n    \"userStatus\": -17771223\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/user/:username",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"user",
														":username"
													],
													"variable": [
														{
															"key": "username",
															"value": "aliquip incididunt Duis dolore consequat",
															"description": "(Required) name that need to be updated"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "User not found",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": 14282420,\n    \"username\": \"elit exercitation culpa\",\n    \"firstName\": \"officia magna cillum\",\n    \"lastName\": \"esse tempor\",\n    \"email\": \"in anim in non adipisicing\",\n    \"password\": \"ex \",\n    \"phone\": \"mollit aute dolor\",\n    \"userStatus\": -17771223\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/user/:username",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"user",
														":username"
													],
													"variable": [
														{
															"key": "username",
															"value": "aliquip incididunt Duis dolore consequat",
															"description": "(Required) name that need to be updated"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "Creates list of users with given input array",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 400ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"id\": 73563415,\n        \"username\": \"nostrud\",\n        \"firstName\": \"sunt est\",\n        \"lastName\": \"nisi\",\n        \"email\": \"laboris ut ullamco Lorem Excepteur\",\n        \"password\": \"d\",\n        \"phone\": \"enim anim cupidatat\",\n        \"userStatus\": 61105318\n    },\n    {\n        \"id\": -45284568,\n        \"username\": \"velit amet consequat\",\n        \"firstName\": \"nulla eiusmod sed\",\n        \"lastName\": \"culpa nisi\",\n        \"email\": \"laboris pariatur exercitation\",\n        \"password\": \"in\",\n        \"phone\": \"culpa cupidatat veniam \",\n        \"userStatus\": -28675220\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/user/createWithArray",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"createWithArray"
									]
								}
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/user/createWithArray",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												"createWithArray"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Creates list of users with given input array",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"id\": -62732501,\n        \"username\": \"eiusmod\",\n        \"firstName\": \"ad Excepteur sunt dolor\",\n        \"lastName\": \"laborum amet proident\",\n        \"email\": \"ad ea est\",\n        \"password\": \"ex anim voluptate\",\n        \"phone\": \"esse Lorem aute\",\n        \"userStatus\": -15511920\n    },\n    {\n        \"id\": 15560539,\n        \"username\": \"aliquip dolo\",\n        \"firstName\": \"non aliqua sit ad\",\n        \"lastName\": \"proident \",\n        \"email\": \"ea sed\",\n        \"password\": \"ad nisi voluptate\",\n        \"phone\": \"magna aliquip anim\",\n        \"userStatus\": 78246909\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/user/createWithList",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"createWithList"
									]
								}
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/user/createWithList",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												"createWithList"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Logs user into the system",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user/login?username=aliquip incididunt Duis dolore consequat&password=aliquip incididunt Duis dolore consequat",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"login"
									],
									"query": [
										{
											"key": "username",
											"value": "aliquip incididunt Duis dolore consequat",
											"description": "(Required) The user name for login"
										},
										{
											"key": "password",
											"value": "aliquip incididunt Duis dolore consequat",
											"description": "(Required) The password for login in clear text"
										}
									]
								}
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/user/login?username=aliquip incididunt Duis dolore consequat&password=aliquip incididunt Duis dolore consequat",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												"login"
											],
											"query": [
												{
													"key": "username",
													"value": "aliquip incididunt Duis dolore consequat"
												},
												{
													"key": "password",
													"value": "aliquip incididunt Duis dolore consequat"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Expires-After",
											"value": "2018-05-20T09:24:06.460Z",
											"description": "date in UTC when token expires"
										},
										{
											"key": "X-Rate-Limit",
											"value": "20563605",
											"description": "calls per hour allowed by the user"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "\"aliquip incididunt Duis dolore consequat\""
								},
								{
									"name": "Invalid username/password supplied",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/user/login?username=aliquip incididunt Duis dolore consequat&password=aliquip incididunt Duis dolore consequat",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												"login"
											],
											"query": [
												{
													"key": "username",
													"value": "aliquip incididunt Duis dolore consequat"
												},
												{
													"key": "password",
													"value": "aliquip incididunt Duis dolore consequat"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Logs out current logged in user session",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"logout"
									]
								}
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/user/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												"logout"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "Store",
					"item": [
						{
							"name": "Order",
							"item": [
								{
									"name": "{order Id}",
									"item": [
										{
											"name": "Find purchase order by ID",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Response time is less than 400ms\", function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(400);",
															"});",
															"",
															"var schema = {",
															"    \"id\": \"number\",",
															"    \"petId\": \"number\",",
															"    \"quantity\": \"number\",",
															"    \"status\": \"string\",",
															"    \"complete\": \"boolean\"",
															"};",
															"",
															"pm.test('Schema is valid', function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/store/order/{{validOrderId}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"store",
														"order",
														"{{validOrderId}}"
													]
												},
												"description": "For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/store/order/:orderId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"store",
																"order",
																":orderId"
															],
															"variable": [
																{
																	"key": "orderId",
																	"value": "2",
																	"description": "(Required) ID of pet that needs to be fetched"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"id\": -97923498,\n \"petId\": -73208560,\n \"quantity\": -9455943,\n \"shipDate\": \"2005-01-06T15:02:51.516Z\",\n \"status\": \"approved\",\n \"complete\": true\n}"
												},
												{
													"name": "Invalid ID supplied",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/store/order/:orderId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"store",
																"order",
																":orderId"
															],
															"variable": [
																{
																	"key": "orderId",
																	"value": "2",
																	"description": "(Required) ID of pet that needs to be fetched"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Order not found",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/store/order/:orderId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"store",
																"order",
																":orderId"
															],
															"variable": [
																{
																	"key": "orderId",
																	"value": "2",
																	"description": "(Required) ID of pet that needs to be fetched"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								}
							]
						},
						{
							"name": "Returns pet inventories by status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "api_key",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/store/inventory",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"inventory"
									]
								},
								"description": "Returns a map of status codes to quantities"
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "api_key",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/store/inventory",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"store",
												"inventory"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{}"
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Negative",
			"item": [
				{
					"name": "Duplicate unique fields",
					"item": [
						{
							"name": "Create duplicate user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"var schema = {",
											"    \"code\": \"number\",",
											"    \"type\": \"string\",",
											"    \"message\": \"string\"",
											"};",
											"",
											"pm.test('Schema is valid', function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 14282420,\n    \"username\": \"testUser\",\n    \"firstName\": \"testFirstName\",\n    \"lastName\": \"testLastName\",\n    \"email\": \"test@email.com\",\n    \"password\": \"testPassword\",\n    \"phone\": \"+555558865\",\n    \"userStatus\": -17771223\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/user",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user"
									]
								},
								"description": "This can only be done by the logged in user."
							},
							"response": [
								{
									"name": "Create duplicate user",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": 14282420,\n    \"username\": \"testUser\",\n    \"firstName\": \"testFirstName\",\n    \"lastName\": \"testLastName\",\n    \"email\": \"test@email.com\",\n    \"password\": \"testPassword\",\n    \"phone\": \"+555558865\",\n    \"userStatus\": -17771223\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/user",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user"
											]
										}
									},
									"_postman_previewlanguage": "",
									"header": [
										{}
									],
									"cookie": [
										{
											"expires": "Invalid Date"
										}
									],
									"body": "{\n    \"code\": 400,\n    \"type\": \"Bad Request\",\n    \"message\": \"User already exists, unable to create duplicated user\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "Invalid Body Fields",
					"item": [
						{
							"name": "Pet  - Update - Invalid ID type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Your test name\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(400);",
											"    pm.expect(jsonData.type).to.eql(\"Bad input\");",
											"    pm.expect(jsonData.message).to.eql(\"Invalid type for ID parameter\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"doggie\",\n    \"photoUrls\": [\n        \"nostru\",\n        \"enim laborum\"\n    ],\n    \"id\": \"XXXX\",\n    \"category\": {\n        \"id\": 95616787,\n        \"name\": \"commodo sit\"\n    },\n    \"tags\": [\n        {\n            \"id\": 81095576,\n            \"name\": \"laborum adipisicing\"\n        },\n        {\n            \"id\": -79022802,\n            \"name\": \"ea ut dolore culpa sit\"\n        }\n    ],\n    \"status\": \"pending\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/pet",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet"
									]
								}
							},
							"response": [
								{
									"name": "Invalid ID supplied",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: oauth2",
												"key": "Authorization",
												"value": "<token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/pet",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pet"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Find pet by ID Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 400ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(400);",
											"});",
											"",
											"var schema = {",
											"    \"code\": \"number\",",
											"    \"type\": \"string\",",
											"    \"message\": \"string\"",
											"};",
											"",
											"pm.test('Schema is valid', function () {",
											"    pm.expect(tv4.validate(data1, schema)).to.be.true;",
											"});",
											"",
											"pm.test(\"Content is valid\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(1);",
											"    pm.expect(jsonData.type).to.eql(\"error\");",
											"    pm.expect(jsonData.message).to.eql(\"Pet not found\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "api_key",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/pet/03",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										"03"
									]
								},
								"description": "Returns a single pet"
							},
							"response": [
								{
									"name": "Pet not found",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "api_key",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/pet/:petId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pet",
												":petId"
											],
											"variable": [
												{
													"key": "petId",
													"value": "20563605",
													"description": "(Required) ID of pet to return"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "Missing Body Fields",
					"item": []
				},
				{
					"name": "Missing Params",
					"item": []
				},
				{
					"name": "Invalid Request",
					"item": [
						{
							"name": "Invalid path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Types are valid\", function () {",
											"    var jsonObject = xml2Json(responseBody);",
											"    pm.expect(jsonObject.apiResponse.message).to.be.a(\"string\");",
											"    pm.expect(jsonObject.apiResponse.type).to.be.a(\"string\");",
											"});",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": 0,\n  \"username\": \"string\",\n  \"firstName\": \"string\",\n  \"lastName\": \"string\",\n  \"email\": \"string\",\n  \"password\": \"string\",\n  \"phone\": \"string\",\n  \"userStatus\": 0\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/invalid",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"invalid"
									]
								},
								"description": "This can only be done by the logged in user."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": 14282420,\n    \"username\": \"elit exercitation culpa\",\n    \"firstName\": \"officia magna cillum\",\n    \"lastName\": \"esse tempor\",\n    \"email\": \"in anim in non adipisicing\",\n    \"password\": \"ex \",\n    \"phone\": \"mollit aute dolor\",\n    \"userStatus\": -17771223\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/user",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Cleanup",
			"item": [
				{
					"name": "Delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 300ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(300);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/{{validUsername}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"{{validUsername}}"
							]
						},
						"description": "This can only be done by the logged in user."
					},
					"response": [
						{
							"name": "Invalid username supplied",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user/:username",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										":username"
									],
									"variable": [
										{
											"key": "username",
											"value": "aliquip incididunt Duis dolore consequat",
											"description": "(Required) The name that needs to be deleted"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "User not found",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user/:username",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										":username"
									],
									"variable": [
										{
											"key": "username",
											"value": "aliquip incididunt Duis dolore consequat",
											"description": "(Required) The name that needs to be deleted"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Deletes a pet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 400ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "api_key",
								"value": ""
							}
						],
						"url": {
							"raw": "{{baseUrl}}/pet/{{validPetId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								"{{validPetId}}"
							]
						}
					},
					"response": [
						{
							"name": "Invalid ID supplied",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"key": "api_key",
										"value": "aliquip incididunt Duis dolore consequat"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pet/:petId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										":petId"
									],
									"variable": [
										{
											"key": "petId",
											"value": "20563605",
											"description": "(Required) Pet id to delete"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Pet not found",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"key": "api_key",
										"value": "aliquip incididunt Duis dolore consequat"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pet/:petId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										":petId"
									],
									"variable": [
										{
											"key": "petId",
											"value": "20563605",
											"description": "(Required) Pet id to delete"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Delete purchase order by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 400ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/store/order/{{validOrderId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"store",
								"order",
								"{{validOrderId}}"
							]
						},
						"description": "For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors"
					},
					"response": [
						{
							"name": "Invalid ID supplied",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/store/order/:orderId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order",
										":orderId"
									],
									"variable": [
										{
											"key": "orderId",
											"value": "33940296",
											"description": "(Required) ID of the order that needs to be deleted"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Order not found",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/store/order/:orderId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order",
										":orderId"
									],
									"variable": [
										{
											"key": "orderId",
											"value": "33940296",
											"description": "(Required) ID of the order that needs to be deleted"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://petstore.swagger.io/v2",
			"type": "string"
		},
		{
			"key": "validUsername",
			"value": "testUser"
		},
		{
			"key": "validPetId",
			"value": "petId"
		},
		{
			"key": "invalidUsername",
			"value": "invalidUsername"
		}
	]
}